// Generated by gencpp from file kuka_cv/RequestCanvasResponse.msg
// DO NOT EDIT!


#ifndef KUKA_CV_MESSAGE_REQUESTCANVASRESPONSE_H
#define KUKA_CV_MESSAGE_REQUESTCANVASRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kuka_cv/Pose.h>

namespace kuka_cv
{
template <class ContainerAllocator>
struct RequestCanvasResponse_
{
  typedef RequestCanvasResponse_<ContainerAllocator> Type;

  RequestCanvasResponse_()
    : p()
    , width(0.0)
    , height(0.0)  {
    }
  RequestCanvasResponse_(const ContainerAllocator& _alloc)
    : p(_alloc)
    , width(0.0)
    , height(0.0)  {
  (void)_alloc;
    }



   typedef  ::kuka_cv::Pose_<ContainerAllocator>  _p_type;
  _p_type p;

   typedef double _width_type;
  _width_type width;

   typedef double _height_type;
  _height_type height;





  typedef boost::shared_ptr< ::kuka_cv::RequestCanvasResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuka_cv::RequestCanvasResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RequestCanvasResponse_

typedef ::kuka_cv::RequestCanvasResponse_<std::allocator<void> > RequestCanvasResponse;

typedef boost::shared_ptr< ::kuka_cv::RequestCanvasResponse > RequestCanvasResponsePtr;
typedef boost::shared_ptr< ::kuka_cv::RequestCanvasResponse const> RequestCanvasResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuka_cv::RequestCanvasResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuka_cv::RequestCanvasResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuka_cv::RequestCanvasResponse_<ContainerAllocator1> & lhs, const ::kuka_cv::RequestCanvasResponse_<ContainerAllocator2> & rhs)
{
  return lhs.p == rhs.p &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuka_cv::RequestCanvasResponse_<ContainerAllocator1> & lhs, const ::kuka_cv::RequestCanvasResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuka_cv

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kuka_cv::RequestCanvasResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuka_cv::RequestCanvasResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuka_cv::RequestCanvasResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuka_cv::RequestCanvasResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuka_cv::RequestCanvasResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuka_cv::RequestCanvasResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuka_cv::RequestCanvasResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "570dff0db84b26274aa11161f4754d11";
  }

  static const char* value(const ::kuka_cv::RequestCanvasResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x570dff0db84b2627ULL;
  static const uint64_t static_value2 = 0x4aa11161f4754d11ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuka_cv::RequestCanvasResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuka_cv/RequestCanvasResponse";
  }

  static const char* value(const ::kuka_cv::RequestCanvasResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuka_cv::RequestCanvasResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Pose p\n"
"float64 width\n"
"float64 height\n"
"\n"
"\n"
"================================================================================\n"
"MSG: kuka_cv/Pose\n"
"# Position\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"# Orientation\n"
"float64 phi\n"
"float64 theta\n"
"float64 psi\n"
;
  }

  static const char* value(const ::kuka_cv::RequestCanvasResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuka_cv::RequestCanvasResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.p);
      stream.next(m.width);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RequestCanvasResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuka_cv::RequestCanvasResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuka_cv::RequestCanvasResponse_<ContainerAllocator>& v)
  {
    s << indent << "p: ";
    s << std::endl;
    Printer< ::kuka_cv::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.p);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUKA_CV_MESSAGE_REQUESTCANVASRESPONSE_H
